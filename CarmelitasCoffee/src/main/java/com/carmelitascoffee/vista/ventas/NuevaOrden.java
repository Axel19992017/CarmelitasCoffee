/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.carmelitascoffee.vista.ventas;

import com.carmelitascoffee.controlador.Utilidades;
import com.carmelitascoffee.controlador.ventas.CNuevaOrden;
import com.carmelitascoffee.controlador.ventas.CNuevoCliente;
import com.carmelitascoffee.pojo.Cliente;
import com.carmelitascoffee.pojo.DetalleOrdenProducto;
import com.carmelitascoffee.pojo.DetalleOrdenServicio;
import com.carmelitascoffee.pojo.Orden;
import com.carmelitascoffee.pojo.Producto;
import com.carmelitascoffee.pojo.Servicio;
import com.carmelitascoffee.vista.inventario.Productos;
import com.carmelitascoffee.vista.inventario.Servicios;
import com.placeholder.PlaceHolder;

import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import swing.Controles.TableZ;

/**
 *
 * @author admin
 */
public class NuevaOrden extends JInternalFrame {

    Session s;
    int idEmpleado, idCliente;
    String idFactura;
    CNuevaOrden controlador;
    Utilidades util;

    /**
     * Creates new form InternalFrameZ
     *
     * @param s session
     * @param idEmpleado para ingresar ordenes
     */
    public NuevaOrden(Session s, int idEmpleado) {
        initComponents();
        this.s = s;
        this.idEmpleado = idEmpleado;
        tfEmpleadoid.setText("Empleado #" + idEmpleado);
        controlador = new CNuevaOrden(s);
        this.idFactura = controlador.getNuevoCodigoFactura();
        tfNumeroFactura.setText("CÃ³digo: " + this.idFactura);
        util = new Utilidades(this);
        PlaceHolder holder = new PlaceHolder(tfIdCliente, "Cliente");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        tfEmpleadoid = new swing.Controles.TextFieldZ();
        tfNumeroFactura = new swing.Controles.TextFieldZ();
        cbtipoOrden = new swing.Controles.ComboBoxZ();
        jScrollPane1 = new javax.swing.JScrollPane();
        tOrden = new swing.Controles.TableZ();
        bRegistrarOrden = new swing.Controles.ButtonZ();
        tfIdCliente = new swing.Controles.TextFieldZ();
        pAgregarPSO = new swing.Contenedores.PanelZ();
        lTitulo2 = new swing.Controles.LabelZ();
        tfId = new swing.Controles.TextFieldZ();
        bPersonasContactoVista = new swing.Controles.ButtonZ();
        tfFechaRegistro = new swing.Controles.SpinnerZ();
        bProductosVista = new swing.Controles.ButtonZ();
        bServiciosVista = new swing.Controles.ButtonZ();
        lTotal = new swing.Controles.LabelZ();
        tfCantidad = new swing.Controles.TextFieldZ();
        tfCantidad1 = new swing.Controles.TextFieldZ();
        labelZ1 = new swing.Controles.LabelZ();
        labelZ3 = new swing.Controles.LabelZ();
        bAgregar = new swing.Controles.ButtonZ();
        lTotal1 = new swing.Controles.LabelZ();

        setBackground(new java.awt.Color(89, 42, 42));
        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setTitle("Nueva Orden");
        setVisible(true);
        getContentPane().setLayout(new java.awt.GridBagLayout());

        tfEmpleadoid.setEditable(false);
        tfEmpleadoid.setBackground(new java.awt.Color(89, 24, 24));
        tfEmpleadoid.setBorder(null);
        tfEmpleadoid.setForeground(java.awt.Color.white);
        tfEmpleadoid.setText("");
        tfEmpleadoid.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        getContentPane().add(tfEmpleadoid, gridBagConstraints);

        tfNumeroFactura.setEditable(false);
        tfNumeroFactura.setBackground(new java.awt.Color(89, 24, 24));
        tfNumeroFactura.setBorder(null);
        tfNumeroFactura.setForeground(java.awt.Color.white);
        tfNumeroFactura.setText("");
        tfNumeroFactura.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(tfNumeroFactura, gridBagConstraints);

        cbtipoOrden.setBackground(new java.awt.Color(89, 24, 24));
        cbtipoOrden.setBorder(null);
        cbtipoOrden.setForeground(java.awt.Color.white);
        cbtipoOrden.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Producto", "Servicio" }));
        cbtipoOrden.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(cbtipoOrden, gridBagConstraints);

        tOrden.setBackground(new java.awt.Color(89, 24, 24));
        tOrden.setBorder(null);
        tOrden.setForeground(java.awt.Color.white);
        tOrden.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cod", "Nombre", "Precio", "Cantidad", "Descuento Unit", "IVA", "SubTotal"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Float.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tOrden.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tOrdenKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tOrden);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.8;
        gridBagConstraints.weighty = 0.8;
        gridBagConstraints.insets = new java.awt.Insets(1, 1, 1, 1);
        getContentPane().add(jScrollPane1, gridBagConstraints);

        bRegistrarOrden.setBackground(new java.awt.Color(89, 24, 24));
        bRegistrarOrden.setBorder(null);
        bRegistrarOrden.setForeground(java.awt.Color.white);
        bRegistrarOrden.setText("Registrar Orden");
        bRegistrarOrden.setFont(new java.awt.Font("Dialog", 3, 11)); // NOI18N
        bRegistrarOrden.setOpaque(true);
        bRegistrarOrden.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bRegistrarOrdenMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bRegistrarOrdenMouseExited(evt);
            }
        });
        bRegistrarOrden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bRegistrarOrdenActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 10;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(bRegistrarOrden, gridBagConstraints);

        tfIdCliente.setBackground(new java.awt.Color(89, 24, 24));
        tfIdCliente.setBorder(null);
        tfIdCliente.setForeground(java.awt.Color.white);
        tfIdCliente.setText("");
        tfIdCliente.setOpaque(true);
        tfIdCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tfIdClienteFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tfIdClienteFocusLost(evt);
            }
        });
        tfIdCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfIdClienteKeyTyped(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(tfIdCliente, gridBagConstraints);

        lTitulo2.setBackground(new java.awt.Color(89, 24, 24));
        lTitulo2.setBorder(null);
        lTitulo2.setForeground(java.awt.Color.white);
        lTitulo2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lTitulo2.setText("CÃ³digo del Producto/Servicio:");
        pAgregarPSO.add(lTitulo2, java.awt.BorderLayout.NORTH);

        tfId.setBackground(new java.awt.Color(89, 24, 24));
        tfId.setBorder(null);
        tfId.setForeground(java.awt.Color.white);
        tfId.setText("");
        tfId.setToolTipText("");
        tfId.setOpaque(true);
        tfId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tfIdKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tfIdKeyTyped(evt);
            }
        });
        pAgregarPSO.add(tfId, java.awt.BorderLayout.CENTER);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(pAgregarPSO, gridBagConstraints);

        bPersonasContactoVista.setBackground(new java.awt.Color(89, 24, 24));
        bPersonasContactoVista.setBorder(null);
        bPersonasContactoVista.setForeground(java.awt.Color.white);
        bPersonasContactoVista.setText("Ver clientes registrados");
        bPersonasContactoVista.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        bPersonasContactoVista.setOpaque(true);
        bPersonasContactoVista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bRegistrarOrdenMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bRegistrarOrdenMouseExited(evt);
            }
        });
        bPersonasContactoVista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bPersonasContactoVistaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(bPersonasContactoVista, gridBagConstraints);

        tfFechaRegistro.setBackground(new java.awt.Color(89, 24, 24));
        tfFechaRegistro.setBorder(null);
        tfFechaRegistro.setForeground(java.awt.Color.white);
        tfFechaRegistro.setModel(new javax.swing.SpinnerDateModel());
        tfFechaRegistro.setFocusable(false);
        tfFechaRegistro.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(tfFechaRegistro, gridBagConstraints);

        bProductosVista.setBackground(new java.awt.Color(89, 24, 24));
        bProductosVista.setBorder(null);
        bProductosVista.setForeground(java.awt.Color.white);
        bProductosVista.setText("Ver productos registrados");
        bProductosVista.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        bProductosVista.setOpaque(true);
        bProductosVista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bRegistrarOrdenMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bRegistrarOrdenMouseExited(evt);
            }
        });
        bProductosVista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bProductosVistaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(bProductosVista, gridBagConstraints);

        bServiciosVista.setBackground(new java.awt.Color(89, 24, 24));
        bServiciosVista.setBorder(null);
        bServiciosVista.setForeground(java.awt.Color.white);
        bServiciosVista.setText("Ver servicios registrados");
        bServiciosVista.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        bServiciosVista.setOpaque(true);
        bServiciosVista.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bRegistrarOrdenMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bRegistrarOrdenMouseExited(evt);
            }
        });
        bServiciosVista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bServiciosVistaActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(bServiciosVista, gridBagConstraints);

        lTotal.setBackground(new java.awt.Color(89, 24, 24));
        lTotal.setBorder(null);
        lTotal.setForeground(java.awt.Color.white);
        lTotal.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lTotal.setText("Total: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        getContentPane().add(lTotal, gridBagConstraints);

        tfCantidad.setBackground(new java.awt.Color(89, 24, 24));
        tfCantidad.setBorder(null);
        tfCantidad.setForeground(java.awt.Color.white);
        tfCantidad.setText("");
        tfCantidad.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(tfCantidad, gridBagConstraints);

        tfCantidad1.setBackground(new java.awt.Color(89, 24, 24));
        tfCantidad1.setBorder(null);
        tfCantidad1.setForeground(java.awt.Color.white);
        tfCantidad1.setText("");
        tfCantidad1.setOpaque(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.3;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(tfCantidad1, gridBagConstraints);

        labelZ1.setText("Cliente:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(labelZ1, gridBagConstraints);

        labelZ3.setText("unidades con un descuento de: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(labelZ3, gridBagConstraints);

        bAgregar.setText("Agregar");
        bAgregar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                bAgregarMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                bAgregarMouseExited(evt);
            }
        });
        bAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bAgregarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 5;
        getContentPane().add(bAgregar, gridBagConstraints);

        lTotal1.setBackground(new java.awt.Color(89, 24, 24));
        lTotal1.setBorder(null);
        lTotal1.setForeground(java.awt.Color.white);
        lTotal1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lTotal1.setText("Total: ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(20, 20, 20, 20);
        getContentPane().add(lTotal1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void bPersonasContactoVistaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bPersonasContactoVistaActionPerformed
        JDesktopPane jdp = getDesktopPane();
        ClienteVista clienteVista = new ClienteVista(s);
        clienteVista.setVisible(true);
        clienteVista.pack();
        jdp.add(clienteVista);
        clienteVista.toFront();
    }//GEN-LAST:event_bPersonasContactoVistaActionPerformed

    private void bProductosVistaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bProductosVistaActionPerformed
        JDesktopPane jdp = getDesktopPane();
        Productos productos = new Productos(s);
        productos.setVisible(true);
        productos.pack();
        jdp.add(productos);
        productos.toFront();
    }//GEN-LAST:event_bProductosVistaActionPerformed

    private void bServiciosVistaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bServiciosVistaActionPerformed
        JDesktopPane jdp = getDesktopPane();
        Servicios servicios = new Servicios(s);
        servicios.setVisible(true);
        servicios.pack();
        jdp.add(servicios);
        servicios.toFront();
    }//GEN-LAST:event_bServiciosVistaActionPerformed

    private void tOrdenKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tOrdenKeyReleased
        try {
            int rowSelect = tOrden.getSelectedRow();
            int columnSelect = tOrden.getSelectedColumn();
            int cantidad = Integer.parseInt(tOrden.getValueAt(rowSelect, 3) + "");
            double precio = Double.parseDouble(tOrden.getValueAt(rowSelect, 2) + "");
            float descuento = Float.parseFloat(tOrden.getValueAt(rowSelect, 4) + "");
            String codigo = (String) tOrden.getValueAt(rowSelect, 0);
            String tipo = codigo.split("-")[0];
            codigo = codigo.split("-")[1];
            int id = Integer.parseInt(codigo);

            Producto p = null;

            if ("P".equals(tipo)) {
                p = controlador.getProducto(id);
            }

            if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
                if (columnSelect == 4) {
                    if (descuento > 1 || descuento < 0) {
                        JOptionPane.showMessageDialog(this, "El descuento tiene que estar entre 0 y 1");
                        descuento = 0;
                        tOrden.setValueAt(0, rowSelect, 4);

                    }
                } else if (columnSelect == 3) {
                    if (cantidad < 0) {
                        JOptionPane.showMessageDialog(this, "La cantidad debe ser mayor que 0");
                        tOrden.setValueAt(0, rowSelect, 3);
                        cantidad = 0;
                    }
                    if ("P".equals(tipo)) {
                        if (cantidad > p.getCantidadEnInventario()) {
                            JOptionPane.showMessageDialog(this, "La Cantidad debe de estar entre 0 y el nÃºmero de unidades en inventario");
                            tOrden.setValueAt(p.getCantidadEnInventario(), rowSelect, 3);
                            cantidad = p.getCantidadEnInventario();
                        }
                    }
                }

                calcularSubTotal(rowSelect);
                calcularIVA(rowSelect);

            }

            if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
                rowSelect = tOrden.getSelectedRow();
                if (JOptionPane.showConfirmDialog(this, "Â¿Seguro de eliminar la fila seleccionada?") == 0) {
                    eliminarFila(rowSelect);
                    calcularIVA();
                    calcularTotal();
                }
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(this, e);
        }
    }//GEN-LAST:event_tOrdenKeyReleased

    private void tfIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfIdKeyTyped
        String textoId = tfId.getText();
        char caracterDigitado = evt.getKeyChar();
        if (textoId.length() == 0) {
            if (caracterDigitado != 'S' && caracterDigitado != 'P') {
                evt.consume();
            }
        } else if (!Character.isDigit(caracterDigitado) && !Character.isISOControl(caracterDigitado)) {
            evt.consume();
        }
    }//GEN-LAST:event_tfIdKeyTyped

    private void tfIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfIdKeyPressed
        if (tfEmpleadoid.getText().length() != 0 && evt.getKeyCode() == KeyEvent.VK_ENTER) {
            agregarDetalleOrden();
        }
    }//GEN-LAST:event_tfIdKeyPressed

    private void bRegistrarOrdenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bRegistrarOrdenActionPerformed
        if (validarDatos().isEmpty()) {
            try {

                Orden o = new Orden(controlador.getCliente(idCliente), controlador.getEmpleado(idEmpleado));
                o.setNumeroFactura(idFactura);
                o.setFechaOrden((Date) tfFechaRegistro.getValue());
                o.setFechaRequerida((Date) tfFechaRegistro.getValue());
                o.setFechaEntrega((Date) tfFechaRegistro.getValue());
                o = controlador.agregarOrden(o);

                DefaultTableModel model = (DefaultTableModel) tOrden.getModel();
                for (int i = 0; i < model.getRowCount(); i++) {
                    String tipoOrden = (String) model.getValueAt(i, 0);
                    int cantidad = Integer.parseInt(tOrden.getValueAt(i, 3) + "");
                    float descuento = Float.parseFloat(tOrden.getValueAt(i, 4) + "");
                    float precio = Float.parseFloat(tOrden.getValueAt(i, 2) + "");
                    String celda1 = (String) tOrden.getValueAt(i, 1);
                    if ("Servicio".equals(tipoOrden)) {
                        int idServicio = Integer.parseInt(celda1.split("-")[0]);
                        Servicio servicio = controlador.getServicios(idServicio);
                        DetalleOrdenServicio dos = new DetalleOrdenServicio(o, servicio);
                        dos.setCantidad(cantidad);
                        dos.setDescuento(new BigDecimal(descuento));
                        dos.setPrecioUnit(new BigDecimal(precio));
                        controlador.agregarDetalleOrdenServicio(dos);

                    } else if ("Producto".equals(tipoOrden)) {
                        int idProducto = Integer.parseInt(celda1.split("-")[0]);
                        Producto producto = controlador.getProducto(idProducto);
                        DetalleOrdenProducto dop = new DetalleOrdenProducto(o, producto);
                        dop.setCantidad(cantidad);
                        dop.setDescuento(new BigDecimal(descuento));
                        dop.setPrecioUnit(new BigDecimal(precio));
                        controlador.agregarDetalleOrdenProducto(dop);

                    }
                }
                JOptionPane.showMessageDialog(this, "Orden registrada exitosamente!");
                model.setRowCount(0);
                tOrden.setModel(model);
                tfIdCliente.setText("");
                idFactura = controlador.getNuevoCodigoFactura();
                tfNumeroFactura.setText("CÃ³digo: " + idFactura);
            } catch (NumberFormatException | HibernateException e) {
                JOptionPane.showMessageDialog(this, e + "" + e.getMessage());
            }
        } else {
            JOptionPane.showMessageDialog(this, validarDatos());
        }

    }//GEN-LAST:event_bRegistrarOrdenActionPerformed

    private void bRegistrarOrdenMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bRegistrarOrdenMouseEntered
        Utilidades.cambiarColorBotonEntered(evt);
    }//GEN-LAST:event_bRegistrarOrdenMouseEntered

    private void bRegistrarOrdenMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bRegistrarOrdenMouseExited
        Utilidades.cambiarColorBotonExited(evt);
    }//GEN-LAST:event_bRegistrarOrdenMouseExited

    private void tfIdClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfIdClienteKeyTyped
        if (KeyEvent.VK_ENTER == evt.getKeyCode()) {
            tfIdCliente.setFocusable(false);
        } else if (!Character.isDigit(evt.getKeyChar())) {
            evt.consume();
        }

    }//GEN-LAST:event_tfIdClienteKeyTyped

    private void tfIdClienteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfIdClienteFocusLost
        idCliente = Integer.parseInt(tfIdCliente.getText());
        Cliente cliente = controlador.getCliente(idCliente);
        if (cliente != null) {
            tfIdCliente.setEditable(false);
            tfIdCliente.setText(cliente.getNombres() + " " + cliente.getApellidos());
        }
    }//GEN-LAST:event_tfIdClienteFocusLost

    private void tfIdClienteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tfIdClienteFocusGained
        tfIdCliente.setEditable(true);
        tfIdCliente.setText("" + idCliente);
    }//GEN-LAST:event_tfIdClienteFocusGained

    private void bAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bAgregarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bAgregarActionPerformed

    private void bAgregarMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bAgregarMouseEntered
        Utilidades.cambiarColorBotonEntered(evt);        // TODO add your handling code here:
    }//GEN-LAST:event_bAgregarMouseEntered

    private void bAgregarMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bAgregarMouseExited
        Utilidades.cambiarColorBotonExited(evt);        // TODO add your handling code here:
    }//GEN-LAST:event_bAgregarMouseExited


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private swing.Controles.ButtonZ bAgregar;
    private swing.Controles.ButtonZ bPersonasContactoVista;
    private swing.Controles.ButtonZ bProductosVista;
    private swing.Controles.ButtonZ bRegistrarOrden;
    private swing.Controles.ButtonZ bServiciosVista;
    private swing.Controles.ComboBoxZ cbtipoOrden;
    private javax.swing.JScrollPane jScrollPane1;
    private swing.Controles.LabelZ lTitulo2;
    private swing.Controles.LabelZ lTotal;
    private swing.Controles.LabelZ lTotal1;
    private swing.Controles.LabelZ labelZ1;
    private swing.Controles.LabelZ labelZ3;
    private swing.Contenedores.PanelZ pAgregarPSO;
    private swing.Controles.TableZ tOrden;
    private swing.Controles.TextFieldZ tfCantidad;
    private swing.Controles.TextFieldZ tfCantidad1;
    private swing.Controles.TextFieldZ tfEmpleadoid;
    private swing.Controles.SpinnerZ tfFechaRegistro;
    private swing.Controles.TextFieldZ tfId;
    private swing.Controles.TextFieldZ tfIdCliente;
    private swing.Controles.TextFieldZ tfNumeroFactura;
    // End of variables declaration//GEN-END:variables

    private void agregarFila(Producto p) {
        DefaultTableModel model = (DefaultTableModel) tOrden.getModel();
        Object[] row = new Object[7];
        double total = p.getPrecio().doubleValue() * 1.0;
        row[0] = "P-" + p.getIdProducto();
        row[1] = p.getDescripcion();
        row[2] = p.getPrecio().toString();
        row[3] = 1;
        row[4] = 0;
        row[5] = (p.isExentoIva()) ? 0 : total * util.getIVA();
        row[6] = (p.isExentoIva()) ? total : total * (1 + util.getIVA());
        model.addRow(row);
        calcularTotal();
    }

    private void agregarFila(Servicio p) {
        DefaultTableModel model = (DefaultTableModel) tOrden.getModel();
        Object[] row = new Object[7];
        double total = p.getPrecio().doubleValue() * 1.0;
        row[0] = "S-" + p.getIdServicio();
        row[1] = p.getDescripcion();
        row[2] = p.getPrecio().toString();
        row[3] = 1;
        row[4] = 0;
        row[5] = (p.isExentoIva()) ? 0 : total * util.getIVA();
        row[6] = (p.isExentoIva()) ? total : total * (1 + util.getIVA());
        model.addRow(row);
        calcularTotal();

    }

    private void calcularTotal() {
        DefaultTableModel model = (DefaultTableModel) tOrden.getModel();
        float total = 0;
        for (int i = 0; i < model.getRowCount(); i++) {
            total += Double.parseDouble(model.getValueAt(i, 6) + "");
        }
        lTotal.setText("Total: " + total);
    }

    private void eliminarFila(int rowSelect) {
        DefaultTableModel model = (DefaultTableModel) tOrden.getModel();
        model.removeRow(rowSelect);
        tOrden.setModel(model);
    }

    private String validarDatos() {
        String mensaje = "";
        try {
            if (controlador.getCliente(idCliente) == null) {
                mensaje += "No existe un cliente con ese id!!";
            }
        } catch (NumberFormatException numberFormatException) {
        }

        return mensaje;
    }

    private void agregarDetalleOrden() {

        String identificador = tfId.getText();
        try {

            int idDetalle = Integer.parseInt(identificador.substring(1, identificador.length()));
            if (identificador.charAt(0) == 'P') {
                try {
                    int idProducto = idDetalle;
                    if (controlador.existeProducto(idProducto)) {
                        Producto p = controlador.getProducto(idProducto);
                        agregarFila(p);
                    } else {
                        JOptionPane.showMessageDialog(this, "El id ingresado no pertenece a los id's registrados de los productos\n"
                                + "De click al botÃ³n \"Ver productos registrados\" para encontrar el id a ingresar.");
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "La cadena digitada no corresponde al formato de los productos identificados\n"
                            + "De click al botÃ³n \"Ver productos registrados\" para encontrar el id a ingresar.");
                }
            } else if (identificador.charAt(0) == 'S') { // agregar detalle orden servicio
                try {
                    int idServicio = idDetalle;
                    if (controlador.existeServicio(idServicio)) {
                        Servicio serv = controlador.getServicios(idServicio);
                        agregarFila(serv);
                    } else {
                        JOptionPane.showMessageDialog(this, "El id ingresado no pertenece a los id's registrados de los servicios\n"
                                + "De click al botÃ³n \"Ver servicios registrados\" para encontrar el id a ingresar.");
                    }
                } catch (NumberFormatException e) {
                    JOptionPane.showMessageDialog(this, "La cadena digitada no corresponde al formato de los servicios identificados\n"
                            + "De click al botÃ³n \"Ver servicios registrados\" para encontrar el id a ingresar.");
                }
            }

        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }

    private void calcularIVA() {
        DefaultTableModel model = (DefaultTableModel) tOrden.getModel();
        float iva = 0;
        for (int i = 0; i < model.getRowCount(); i++) {

            iva += Double.parseDouble(model.getValueAt(i, 5) + "");
        }
        lTotal1.setText("IVA: " + iva);
    }

    private void calcularIVA(int fila) {

        double iva = 0;

        int cantidad = Integer.parseInt(tOrden.getValueAt(fila, 3) + "");
        double precio = Double.parseDouble(tOrden.getValueAt(fila, 2) + "");
        double descuento = Double.parseDouble(tOrden.getValueAt(fila, 4) + "");
        String codigo = (String) tOrden.getValueAt(fila, 0);
        String tipo = codigo.split("-")[0];
        codigo = codigo.split("-")[1];
        int id = Integer.parseInt(codigo);
        boolean exento = false;
        Producto p = null;
        Servicio s = null;
        if ("P".equals(tipo)) {
            p = controlador.getProducto(id);
            exento = p.isExentoIva();
        } else if ("S".equals(tipo)) {
            s = controlador.getServicios(id);
            exento = s.isExentoIva();
        }
        iva = (exento) ? 0 : cantidad * precio * (1 - descuento) * util.getIVA();
        tOrden.setValueAt(iva, fila, 5);
        calcularIVA();

    }

    private void calcularSubTotal(int fila) {
        double total = 0;

        int cantidad = Integer.parseInt(tOrden.getValueAt(fila, 3) + "");
        double precio = Double.parseDouble(tOrden.getValueAt(fila, 2) + "");
        double descuento = Double.parseDouble(tOrden.getValueAt(fila, 4) + "");
        double iva = Double.parseDouble(tOrden.getValueAt(fila, 5) + "");
        total = cantidad * precio * (1 - descuento) * (1 + iva);
        tOrden.setValueAt(total, fila, 6);
        calcularTotal();
    }
}
